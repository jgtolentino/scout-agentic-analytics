#!/usr/bin/env bash
set -euo pipefail

_here() { cd "$(dirname "$0")/.."; }

usage() {
  cat <<USAGE
scoutctl <cmd>

Core:
  bootstrap        # copy .env.example → .env where missing
  e2e              # run router deploy, start web, start vite, start worker
  web              # start Next/Vite web (apps/web) on :3001/:3002
  vite             # start standalone dashboard on :5173
  worker           # start Drive dispatcher (signed)
  verify           # run RLS & router checks
  health           # curl all health endpoints

DB:
  db:migrate       # apply SQL migrations (requires SUPABASE_URL + SRK)
  db:verify        # run SQL self-checks

Env (printed for sanity):
  env              # show essential envs (masked)
USAGE
}

mask() { python3 - <<PY
import os, sys
for k in ["SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","SUPABASE_DB_URL","PIPELINE_SIGNING_KEY"]:
    v=os.environ.get(k,"")
    if not v: print(f"{k}="); continue
    print(f"{k}={v[:6]}…{v[-4:]}")
PY
}

bootstrap() {
  _here
  for f in \
    "$WEB/.env.example" "$VITE/.env.example" "$WORKER/.env.example" ; do
    [ -f "$f" ] || continue
    t="${f%.example}"
    [ -f "$t" ] || cp "$f" "$t"
  done
  echo "bootstrap ✓"
}

web()   { _here; (cd "$WEB"  && npm start || true) & }
vite()  { _here; (cd "$VITE" && npm start || npm run dev || true) & }
worker(){ _here; (cd "$WORKER" && npm run selfcheck && npm run dev) }

db_migrate(){
  : "${SUPABASE_URL:?set SUPABASE_URL}"; : "${SUPABASE_SERVICE_ROLE_KEY:?set SRK}"
  echo "-- applying SQL migrations via REST…" 
  for sql in $(ls -1 supabase/sql/*.sql 2>/dev/null; ls -1 supabase/migrations/*.sql 2>/dev/null); do
    curl -sS "$SUPABASE_URL/rest/v1/sql" -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
      -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
      -H "Content-Type: application/json" \
      --data-binary @<(jq -n --arg s "$(cat "$sql")" '{q:$s}') >/dev/null
    echo "  • $sql"
  done
  echo "migrations ✓"
}

db_verify(){
  : "${SUPABASE_URL:?}"; : "${SUPABASE_SERVICE_ROLE_KEY:?}"
  q='select schemaname,relname from pg_stat_user_tables where schemaname in (''scout'',''public'') order by 1,2;'
  curl -sS "$SUPABASE_URL/rest/v1/sql" -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
    -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
    -H "Content-Type: application/json" --data-binary @<(jq -n --arg q "$q" '{q:$q}') | jq .
}

verify(){
  set -e
  ./verify-scout-recs.sh || true
  echo "router ping…"
  curl -sS "${SUPABASE_FN_URL:-}/scout_ai_router" -d '{"query":"revenue","hint":"executive"}' -H 'Content-Type: application/json' || true
  echo "verify ✓"
}

health(){
  set +e
  for u in \
    "http://localhost:3001/?v7=true" \
    "http://localhost:3002/ai" \
    "http://localhost:5173/v7" ; do
    echo "-- $u"; curl -s -o /dev/null -w "%{http_code}\n" "$u"; done
  
  # MindsDB health check (if configured)
  if [ -n "${MINDSDB_PASSWORD:-}" ]; then
    echo "-- MindsDB MCP server"
    ./scripts/mindsdb-health.sh || echo "MindsDB: unavailable"
  fi
}

e2e(){
  bootstrap
  db_migrate || true
  web; vite
  echo "⇡ give servers 4s"; sleep 4
  worker
}

env(){ mask; }

case "${1:-}" in
  bootstrap) bootstrap;;
  e2e) e2e;;
  web) web;;
  vite) vite;;
  worker) worker;;
  db:migrate) db_migrate;;
  db:verify) db_verify;;
  verify) verify;;
  health) health;;
  env) env;;
  ""|-h|--help) usage;;
  *) echo "unknown cmd"; usage; exit 2;;
esac
